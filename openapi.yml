openapi: "3.0.3"
info:
  title: Spending Journal API Definition
  description: A spending journal, also known as a spending diary, is API to record of your daily money transactions.
  termsOfService: https://spendingjournal.com./terms/
  contact:
    name: API Support
    url: https://spendingjournal.com/support/
    email: support@spendingjournal.com
  license:
    name: MIT license
    url: https://spendingjournal.com/license/
  version: 0.0.1
servers:
  - description: API server
    url: https://api.spendingjournal.com/v1

# path definitions and examples
paths:
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
          application/xml:
            schema:
              $ref: "#/components/schemas/User"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
            application/xml:
              schema:
                $ref: "#/components/schemas/User"
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      description: ""
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: false
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: false
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        "400":
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ""
      operationId: logoutUser
      parameters: []
      responses:
        default:
          description: successful operation
  /user/{username}:
    get:
      tags:
        - user
      summary: Get user by user name
      description: ""
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: "The name that needs to be fetched. Use user1 for testing. "
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
            application/xml:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
    put:
      tags:
        - user
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be deleted
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
          application/xml:
            schema:
              $ref: "#/components/schemas/User"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        default:
          description: successful operation
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        "400":
          description: Invalid username supplied
        "404":
          description: User not found

components:
  schemas:
    Expense:
      type: object
      properties:
        name:
          type: string
          description: "Expense name"
          example: "Groceries"
        value:
          type: number
          description: "Expense value"
          example: 250.50
      xml:
        name: expense
    FixedCost:
      type: object
      properties:
        name:
          type: string
          description: "Fixed cost name"
          example: "Rent"
        value:
          type: number
          description: "Fixed cost value"
          example: 1000.00
      xml:
        name: fixedCost
    CreditBill:
      type: object
      properties:
        name:
          type: string
          description: "Credit bill name"
          example: "Visa"
        value:
          type: number
          description: "Credit bill value"
          example: 850.00
      xml:
        name: creditBill
    MonthlyExpense:
      type: object
      properties:
        salary:
          type: number
          description: "User's net salary"
          example: 3500.50
        gastos:
          type: array
          description: "List of expenses"
          items:
            $ref: "#/components/schemas/Expense"
        custosFixos:
          type: array
          description: "List of fixed costs"
          items:
            $ref: "#/components/schemas/FixedCost"
        faturasCredito:
          type: array
          description: "List of credit bills"
          items:
            $ref: "#/components/schemas/CreditBill"
        totalGastos:
          type: number
          description: "Total amount of all expenses"
          example: 500.00
        totalCustosFixos:
          type: number
          description: "Total amount of fixed costs"
          example: 1200.00
        totalFaturasCredito:
          type: number
          description: "Total amount of credit bills"
          example: 850.00
        saldoFinal:
          type: number
          description: "Final balance after subtracting expenses"
          example: 950.50
      xml:
        name: monthlyExpense
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: "12345"
        userStatus:
          type: integer
          description: User Status
          format: int32
          example: 1
      xml:
        name: user
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: tag
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: "##default"
  requestBodies:
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/User"
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://petstore3.swagger.io/oauth/authorize
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header
